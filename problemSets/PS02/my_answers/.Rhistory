# predict individual support probability
predicted_probability <- predict(additive_model, newdata = new_data, type = "response")
#Question2
# (b)
# create a new_data with 80 of 192 countries participating with no sanctions
new_data <- data.frame([1,0,0,0,0])
dfm$`countries20 of 192`
dfm[0,1]
dfm[0]
dfm[,1]
dfm[1,]
(dfm[1,])
typeof(dfm[1,])
# predict individual support probability
predicted_probability <- predict(additive_model, newdata = [1,0,0,0,0], type = "response")
# predict individual support probability
predicted_probability <- predict(additive_model,[1,0,0,0,0], type = "response")
[1,0,0,0,0]
# predict individual support probability
predicted_probability <- predict(additive_model,data=dfm[1,], type = "response")
# get the result of probability
print(predicted_probability)
dfm[1,]
dfm <- dfm[, -which(names(dfm) == "sanctionsNone")]
dfm <- dfm[, -which(names(dfm) == "countries20 of 192")]
View(dfm)
# train the additive model without interactive terms.
additive_model <- glm(choice ~  + `countries80 of 192` + `countries160 of 192` +  `sanctions5%` + `sanctions15%` + `sanctions20%`,
data = dfm,
family = binomial(link = "logit"))
# check the summary of the model
summary(additive_model)
# predict individual support probability
predicted_probability <- predict(additive_model,data=dfm[1,], type = "response")
# get the result of probability
print(predicted_probability)
# predict individual support probability
predicted_probability <- predict(additive_model,data=dfm[1,1], type = "response")
# get the result of probability
print(predicted_probability)
#Question2
# (b)
# create a new_data with 80 of 192 countries participating with no sanctions
new_data <- dfm[1,]
# predict individual support probability
predicted_probability <- predict(additive_model,data=new_data, type = "response")
#Question2
# (b)
# create a new_data with 80 of 192 countries participating with no sanctions
new_data <- dfm[1,]
# predict individual support probability
predicted_probability <- predict(additive_model,data=new_data, type = "response")
# get the result of probability
print(predicted_probability)
predicted_probability
#Question2
# (b)
# create a new_data with 80 of 192 countries participating with no sanctions
new_data <-data.frame(`countries80 of 192`=1, `countries160 of 192`=0,  `sanctions5%`=0, `sanctions15%`=0, `sanctions20%`=0)
# predict individual support probability
predicted_probability <- predict(additive_model,data=new_data, type = "response")
# get the result of probability
print(predicted_probability)
#Question2
# (b)
# create a new_data with 80 of 192 countries participating with no sanctions
new_data <-data.frame(`countries80 of 192`=1, `countries160 of 192`=0,  `sanctions5%`=0, `sanctions15%`=0, `sanctions20%`=0)
new_data
# predict individual support probability
predicted_probability <- predict(additive_model,data=new_data, type = "response")
predicted_probability
typeof(new_data)
typeof(dfm)
typeof(dfm[1])
typeof(dfm[1,2])
# predict individual support probability
predicted_probability <- predict(additive_model,data=new_data, type = "response")
# get the result of probability
print(predicted_probability)
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c(),  pkgTest)
# set wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load data
load(url("https://github.com/ASDS-TCD/StatsII_Spring2024/blob/main/datasets/climateSupport.RData?raw=true"))
# check the data frame
dfm <- climateSupport
head(dfm)
# Question1
# clean the data into dummy variables
dummy_country_variables <- model.matrix(~ countries -1, data = dfm)
dummy_sanctions_variables <- model.matrix(~ sanctions -1, data = dfm)
dfm$choice<-ifelse(dfm$choice=="Supported",1,0)
dfm <- cbind(dfm, dummy_country_variables)
dfm <- cbind(dfm, dummy_sanctions_variables)
dfm <- dfm[, -which(names(dfm) == "countries")]
dfm <- dfm[, -which(names(dfm) == "sanctions")]
dfm <- dfm[, -which(names(dfm) == "sanctionsNone")]
dfm <- dfm[, -which(names(dfm) == "countries20 of 192")]
View(dfm)
# train the additive model without interactive terms.
additive_model <- glm(choice ~  + `countries80 of 192` + `countries160 of 192` +  `sanctions5%` + `sanctions15%` + `sanctions20%`,
data = dfm,
family = binomial(link = "logit"))
# check the summary of the model
summary(additive_model)
#Question2
# (b)
# create a new_data with 80 of 192 countries participating with no sanctions
new_data <-data.frame(`countries80 of 192`=1, `countries160 of 192`=0,  `sanctions5%`=0, `sanctions15%`=0, `sanctions20%`=0)
# predict individual support probability
predicted_probability <- predict(additive_model,data=new_data, type = "response")
# get the result of probability
print(predicted_probability)
# check the summary of the model
summary(additive_model)
# check the summary of the model
summary(additive_model)
#Question2
# (b)
# create a new_data with 80 of 192 countries participating with no sanctions
new_data <-data.frame(`countries80 of 192`=1, `countries160 of 192`=0,  `sanctions5%`=0, `sanctions15%`=0, `sanctions20%`=0)
# predict individual support probability
predicted_probability <- predict(additive_model, data=new_data, type = "response")
# get the result of probability
print(predicted_probability)
with(dfm)
new_data
new_data
column_names <- names(my_dataframe)
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c(),  pkgTest)
# set wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load data
load(url("https://github.com/ASDS-TCD/StatsII_Spring2024/blob/main/datasets/climateSupport.RData?raw=true"))
# check the data frame
dfm <- climateSupport
head(dfm)
# Question1
# clean the data into dummy variables
dummy_country_variables <- model.matrix(~ countries -1, data = dfm)
dummy_sanctions_variables <- model.matrix(~ sanctions -1, data = dfm)
dfm$choice<-ifelse(dfm$choice=="Supported",1,0)
column_names <- names(my_dataframe)
column_names <- gsub(" ", "_", column_names)
column_names <- names(dfm)
column_names <- gsub(" ", "_", column_names)
names(dfm) <- column_names
View(dfm)
names(dfm) <- column_names
dfm$choice<-ifelse(dfm$choice=="Supported",1,0)
dfm <- cbind(dfm, dummy_country_variables)
dfm <- cbind(dfm, dummy_sanctions_variables)
dfm <- dfm[, -which(names(dfm) == "countries")]
dfm <- dfm[, -which(names(dfm) == "sanctions")]
dfm <- dfm[, -which(names(dfm) == "sanctionsNone")]
dfm <- dfm[, -which(names(dfm) == "countries20 of 192")]
colnames(my_data) <- gsub(" ", "_", colnames(my_data))
colnames(dfm) <- gsub(" ", "_", colnames(dfm))
View(dfm)
# train the additive model without interactive terms.
additive_model <- glm(choice ~ .,
data = dfm,
family = binomial(link = "logit"))
# train the additive model without interactive terms.
additive_model <- glm(choice ~ + `countries80_of_192` + `countries160_of_192` +  `sanctions5%` + `sanctions15%` + `sanctions20%,
data = dfm,
family = binomial(link = "logit"))
# train the additive model without interactive terms.
additive_model <- glm(choice ~ + `countries80_of_192` + `countries160_of_192` +  `sanctions5%` + `sanctions15%` + `sanctions20%`,
# train the additive model without interactive terms.
additive_model <- glm(choice ~`countries80_of_192` + `countries160_of_192` +  `sanctions5%` + `sanctions15%` + `sanctions20%`,
data = dfm,
family = binomial(link = "logit"))
# check the summary of the model
summary(additive_model)
View(dfm)
# load data
load(url("https://github.com/ASDS-TCD/StatsII_Spring2024/blob/main/datasets/climateSupport.RData?raw=true"))
# check the data frame
dfm <- climateSupport
head(dfm)
# Question1
# clean the data into dummy variables
dummy_country_variables <- model.matrix(~ countries -1, data = dfm)
dummy_sanctions_variables <- model.matrix(~ sanctions -1, data = dfm)
dfm$choice<-ifelse(dfm$choice=="Supported",1,0)
dfm <- cbind(dfm, dummy_country_variables)
dfm <- cbind(dfm, dummy_sanctions_variables)
dfm <- dfm[, -which(names(dfm) == "countries")]
dfm <- dfm[, -which(names(dfm) == "sanctions")]
dfm <- dfm[, -which(names(dfm) == "sanctionsNone")]
dfm <- dfm[, -which(names(dfm) == "countries20 of 192")]
colnames(dfm) <- gsub(" ", "_", colnames(dfm))
View(dfm)
# train the additive model without interactive terms.
additive_model <- glm(choice ~ `countries80_of_192` + `countries160_of_192` +  `sanctions5%` + `sanctions15%` + `sanctions20%`,
data = dfm,
family = binomial(link = "logit"))
# check the summary of the model
summary(additive_model)
with(dfm, table(additive_model$ch))
#Question2
# (b)
# create a new_data with 80 of 192 countries participating with no sanctions
new_data <-data.frame(`countries80_ of_192`=1, `countries160_of_192`=0,  `sanctions5%`=0, `sanctions15%`=0, `sanctions20%`=0)
# predict individual support probability
predicted_probability <- predict(additive_model, data=new_data, type = "response")
# get the result of probability
print(predicted_probability)
#Question2
# (b)
# create a new_data with 80 of 192 countries participating with no sanctions
new_data <-data.frame(countries80_ of_192=1, countries160_of_192=0,  sanctions5%=0, sanctions15% =0, sanctions20%=0)
#Question2
# (b)
# create a new_data with 80 of 192 countries participating with no sanctions
new_data <-data.frame(countries80_of_192=1, countries160_of_192=0,  sanctions5%=0, sanctions15% =0, sanctions20%=0)
#Question2
# (b)
# create a new_data with 80 of 192 countries participating with no sanctions
new_data <-data.frame(countries80_of_192=1, countries160_of_192=0,  `sanctions5%` =0, `sanctions15%`=0, `sanctions20%`=0)
# predict individual support probability
predicted_probability <- predict(additive_model, data=new_data, type = "response")
# get the result of probability
print(predicted_probability)
# predict individual support probability
predicted_probability <- predict(additive_model, data=dfm, type = "response")
# get the result of probability
print(predicted_probability)
# predict individual support probability
predicted_probability <- predict(additive_model, data=1, type = "response")
# get the result of probability
print(predicted_probability)
plot(additive_model)
#Question2
# (b)
# create a new_data with 80 of 192 countries participating with no sanctions
new_data <-data.frame(countries80_of_192=1, countries160_of_192=0,  `sanctions5%` =0, `sanctions15%`=0, `sanctions20%`=0)
# predict individual support probability
predicted_probability <- predict(additive_model, data=1, type = "response")
# get the result of probability
print(predicted_probability)
colnames(dfm) <- gsub("%", "percent", colnames(dfm))
View(dfm)
# train the additive model without interactive terms.
additive_model <- glm(choice ~ `countries80_of_192` + `countries160_of_192` +  `sanctions5percent` + `sanctions15percent` + `sanctions20percent`,
data = dfm,
family = binomial(link = "logit"))
# check the summary of the model
summary(additive_model)
#Question2
# (b)
# create a new_data with 80 of 192 countries participating with no sanctions
new_data <-data.frame(countries80_of_192=1, countries160_of_192=0,  `sanctions5percent` =0, `sanctions15percent`=0, `sanctions20percent`=0)
# predict individual support probability
predicted_probability <- predict(additive_model, data=1, type = "response")
# get the result of probability
print(predicted_probability)
typeof(new_data)
plot(additive_model)
#Question2
# (b)
# create a new_data with 80 of 192 countries participating with no sanctions
new_data <-data.frame(countries80_of_192=1, countries160_of_192=0,  `sanctions5percent` =0, `sanctions15percent`=0, `sanctions20percent`=0)
# predict individual support probability
predicted_probability <- predict(additive_model, data=1 )
# get the result of probability
print(predicted_probability)
# predict individual support probability
predicted_probability <- predict(additive_model)
# get the result of probability
print(predicted_probability)
# predict individual support probability
predicted_probability <- predict(additive_model)
# get the result of probability
print(predicted_probability)
# get the result of probability
print(predicted_probability)
new_data
?predict
additive_model
# predict individual support probability
predicted_probability <- predict(additive_model,newdata = new_data)
# get the result of probability
print(predicted_probability)
?predict
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c(),  pkgTest)
# set wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load data
load(url("https://github.com/ASDS-TCD/StatsII_Spring2024/blob/main/datasets/climateSupport.RData?raw=true"))
# check the data frame
dfm <- climateSupport
head(dfm)
# Question1
# clean the data into dummy variables
dummy_country_variables <- model.matrix(~ countries -1, data = dfm)
dummy_sanctions_variables <- model.matrix(~ sanctions -1, data = dfm)
dfm$choice<-ifelse(dfm$choice=="Supported",1,0)
dfm <- cbind(dfm, dummy_country_variables)
dfm <- cbind(dfm, dummy_sanctions_variables)
dfm <- dfm[, -which(names(dfm) == "countries")]
dfm <- dfm[, -which(names(dfm) == "sanctions")]
dfm <- dfm[, -which(names(dfm) == "sanctionsNone")]
dfm <- dfm[, -which(names(dfm) == "countries20 of 192")]
colnames(dfm) <- gsub(" ", "_", colnames(dfm))
colnames(dfm) <- gsub("%", "percent", colnames(dfm))
View(dfm)
# train the additive model without interactive terms.
additive_model <- glm(choice ~ `countries80_of_192` + `countries160_of_192` +  `sanctions5percent` + `sanctions15percent` + `sanctions20percent`,
data = dfm,
family = binomial(link = "logit"))
# check the summary of the model
summary(additive_model)
#Question2
# (b)
# create a new_data with 80 of 192 countries participating with no sanctions
new_data <-data.frame(countries80_of_192=1, countries160_of_192=0,  `sanctions5percent` =0, `sanctions15percent`=0, `sanctions20percent`=0)
# predict individual support probability
predicted_probability <- predict(additive_model,newdata = new_data)
# get the result of probability
print(predicted_probability)
# (c)
# train the additive model with interactive terms.
model_with_interaction <- glm(choice ~ countries * sanctions,
data = dfm,
family = "binomial")
# do a likelihood test between the 2 models
likelihood_ratio_test <- anova(additive_model, model_with_interaction, test = "LRT")
print(likelihood_ratio_test)
# another way to check the necessity of interactive terms:
# check the summary to see the p-value of the corresponding coefficients
summary(model_with_interaction)
# (c)
# train the additive model with interactive terms.
model_with_interaction <- glm(choice ~ `countries80_of_192` * `countries160_of_192` *  `sanctions5percent` * `sanctions15percent` * `sanctions20percent`,
data = dfm,
family = "binomial")
# do a likelihood test between the 2 models
likelihood_ratio_test <- anova(additive_model, model_with_interaction, test = "LRT")
print(likelihood_ratio_test)
# another way to check the necessity of interactive terms:
# check the summary to see the p-value of the corresponding coefficients
summary(model_with_interaction)
# (c)
# train the additive model with interactive terms.
model_with_interaction <- glm(choice ~ `countries80_of_192` + `countries160_of_192` +  `sanctions5percent` + `sanctions15percent` + `sanctions20percent`+`countries80_of_192`:`sanctions5percent`+`countries160_of_192`:`sanctions15percent`+`countries160_of_192`:`sanctions20percent`+`countries160_of_192`:`sanctions5percent`+`countries160_of_192`:`sanctions15percent`+`countries160_of_192`:`sanctions20percent`,
data = dfm,
family = "binomial")
# do a likelihood test between the 2 models
likelihood_ratio_test <- anova(additive_model, model_with_interaction, test = "LRT")
print(likelihood_ratio_test)
# another way to check the necessity of interactive terms:
# check the summary to see the p-value of the corresponding coefficients
summary(model_with_interaction)
# remove objects
rm(list=ls())
# detach all libraries
detachAllPackages <- function() {
basic.packages <- c("package:stats", "package:graphics", "package:grDevices", "package:utils", "package:datasets", "package:methods", "package:base")
package.list <- search()[ifelse(unlist(gregexpr("package:", search()))==1, TRUE, FALSE)]
package.list <- setdiff(package.list, basic.packages)
if (length(package.list)>0)  for (package in package.list) detach(package,  character.only=TRUE)
}
detachAllPackages()
# load libraries
pkgTest <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[,  "Package"])]
if (length(new.pkg))
install.packages(new.pkg,  dependencies = TRUE)
sapply(pkg,  require,  character.only = TRUE)
}
lapply(c(),  pkgTest)
# set wd for current folder
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# load data
load(url("https://github.com/ASDS-TCD/StatsII_Spring2024/blob/main/datasets/climateSupport.RData?raw=true"))
# check the data frame
dfm <- climateSupport
head(dfm)
# Question1
# clean the data into dummy variables
dummy_country_variables <- model.matrix(~ countries -1, data = dfm)
dummy_sanctions_variables <- model.matrix(~ sanctions -1, data = dfm)
dfm$choice<-ifelse(dfm$choice=="Supported",1,0)
dfm <- cbind(dfm, dummy_country_variables)
dfm <- cbind(dfm, dummy_sanctions_variables)
dfm <- dfm[, -which(names(dfm) == "countries")]
dfm <- dfm[, -which(names(dfm) == "sanctions")]
dfm <- dfm[, -which(names(dfm) == "sanctionsNone")]
dfm <- dfm[, -which(names(dfm) == "countries20 of 192")]
colnames(dfm) <- gsub(" ", "_", colnames(dfm))
colnames(dfm) <- gsub("%", "percent", colnames(dfm))
View(dfm)
# train the additive model without interactive terms.
additive_model <- glm(choice ~ `countries80_of_192` + `countries160_of_192` +  `sanctions5percent` + `sanctions15percent` + `sanctions20percent`,
data = dfm,
family = binomial(link = "logit"))
# check the summary of the model
summary(additive_model)
#Question2
# (b)
# create a new_data with 80 of 192 countries participating with no sanctions
new_data <-data.frame(countries80_of_192=1, countries160_of_192=0,  `sanctions5percent` =0, `sanctions15percent`=0, `sanctions20percent`=0)
# predict individual support probability
predicted_probability <- predict(additive_model,newdata = new_data)
# get the result of probability
print(predicted_probability)
# (c)
# train the additive model with interactive terms.
model_with_interaction <- glm(choice ~ `countries80_of_192` + `countries160_of_192` +  `sanctions5percent` + `sanctions15percent` + `sanctions20percent`+`countries80_of_192`:`sanctions5percent`+`countries160_of_192`:`sanctions15percent`+`countries160_of_192`:`sanctions20percent`+`countries160_of_192`:`sanctions5percent`+`countries160_of_192`:`sanctions15percent`+`countries160_of_192`:`sanctions20percent`,
data = dfm,
family = "binomial")
# do a likelihood test between the 2 models
likelihood_ratio_test <- anova(additive_model, model_with_interaction, test = "LRT")
print(likelihood_ratio_test)
# another way to check the necessity of interactive terms:
# check the summary to see the p-value of the corresponding coefficients
summary(model_with_interaction)
summary(additive_model)
# (c)
# train the additive model with interactive terms.
model_with_interaction <- glm(choice ~ `countries80_of_192` + `countries160_of_192` +  `sanctions5percent` + `sanctions15percent` + `sanctions20percent`+`countries80_of_192`:`sanctions5percent`+`countries80_of_192`:`sanctions15percent`+`countries80_of_192`:`sanctions20percent`+`countries160_of_192`:`sanctions5percent`+`countries160_of_192`:`sanctions15percent`+`countries160_of_192`:`sanctions20percent`,
data = dfm,
family = "binomial")
# do a likelihood test between the 2 models
likelihood_ratio_test <- anova(additive_model, model_with_interaction, test = "LRT")
print(likelihood_ratio_test)
# another way to check the necessity of interactive terms:
# check the summary to see the p-value of the corresponding coefficients
summary(model_with_interaction)
summary(additive_model)
# check the summary of the model
summary(additive_model)
summary(additive_model)
# get the result of probability
print(predicted_probability)
# predict individual support probability
predicted_probability <- predict(additive_model,newdata = new_data)
# get the result of probability
print(predicted_probability)
# predict individual support probability
predicted_probability <- predict(additive_model,newdata = new_data)
# get the result of probability
print(predicted_probability)
# predict individual support probability
predicted_probability <- predict(additive_model,newdata = new_data,type = "response")
# get the result of probability
print(predicted_probability)
print(likelihood_ratio_test)
# another way to check the necessity of interactive terms:
# check the summary to see the p-value of the corresponding coefficients
summary(model_with_interaction)
#Question2
data1 <-data.frame(countries80_of_192=0, countries160_of_192=1,  `sanctions5percent` =1, `sanctions15percent`=0, `sanctions20percent`=0)
data2 <-data.frame(countries80_of_192=0, countries160_of_192=1,  `sanctions5percent` =0, `sanctions15percent`=1, `sanctions20percent`=0)
predicted_probability1 <- predict(additive_model,newdata = data1,type = "response")
predicted_probability2 <- predict(additive_model,newdata = data2,type = "response")
predicted_probability2-predicted_probability1
predicted_probability2-predicted_probability1
print(predicted_probability2-predicted_probability1)
